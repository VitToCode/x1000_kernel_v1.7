#ifndef __ISP_REGS_H__
#define __ISP_REGS_H__

struct isp_reg_t {
	unsigned int reg;
	unsigned char value;
};
const struct isp_reg_t isp_mipi_regs_init[] = {
	// add new US settings
	{0x60100, 0x01},//Software reset
	{0x6301b, 0xf0},//isp clock enable
	{0x63025, 0x40},//clock divider
	/*{0x63022, 0x81},*/

	/*{0x63106, 0x01},*/
	/*{0x63107, 0xe0},*/
	{0x6301a, 0xf0},
//	{0x63c19, 0x2a},
	{0x63c21, 0x40},
	/* frame out : use mipi 1 */
		/*{0x63108, 0x04},*/
	/* system initial */
#if 1
		{0x65000, 0x51},
		/*{0x65000, 0x00},*/

		{0x65001, 0x42},
		//{0x65001, 0x07},
		{0x65002, 0x21},
		/*{0x65002, 0xe0},*/

		//{0x65003, 0x00},
		{0x65003, 0x0f},
		{0x65005, 0x10},
#else
		//{0x65005, 0x00},
		{0x65000, 0x7f},

		{0x65001, 0x07},
		//{0x65001, 0x07},
		{0x65002, 0xe5},
		/*{0x65002, 0xe0},*/

		//{0x65003, 0x00},
		{0x65003, 0x0f},
		{0x65005, 0x10},

#endif
#ifdef CONFIG_ANDROID
		{0x63b35, 0x04},
#endif
		//{0x63022, 0x81},
		/*{0x65007, 0x20},*/
};

const struct isp_reg_t isp_dvp_regs_init[] = {
	/* system initial */
	{0x63022, 0x84},//RAW10 input
	{0x63023, 0x00},//sensor clk  4:/8  2:/2  8:/6
	{0x63800, 0x01},
	{0x63b34, 0x23},//overflow_dely_en
	{0x65800, 0x00},
	{0x65023, 0x41},//yuv dcw

	{0x1c174, 0x01},//y36721 set it as manual aec/agc at first.
	{0x1c139, 0x01},//AECAGC function write sensor enable
	{0x1c179, 0x00},//not hdr sensor
	{0x1c528, 0x6c},//pSensorDeviceID[0]
	{0x1c529, 0x6c},
	{0x1c52a, 0x09},//pSensorI2COption[0]
	{0x1c52b, 0x09},
	{0x1c52c, 0x35},
	{0x1c52d, 0x01},
	{0x1c52e, 0x35},
	{0x1c52f, 0x02},
	{0x1c530, 0x00},
	{0x1c531, 0x00},
	{0x1c532, 0x00},
	{0x1c533, 0x00},
	{0x1c534, 0x00},
	{0x1c535, 0x00},
	{0x1c536, 0x00},
	{0x1c537, 0x00},
	{0x1c538, 0x35},
	{0x1c539, 0x0a},
	{0x1c53a, 0x35},
	{0x1c53b, 0x0b},
	{0x1c53c, 0x00},
	{0x1c53d, 0x00},
	{0x1c53e, 0x00},
	{0x1c53f, 0x00},
	{0x1c540, 0x00},
	{0x1c541, 0x00},
	{0x1c542, 0x00},
	{0x1c543, 0x00},
	{0x1c55c, 0xff},
	{0x1c55d, 0xff},
	{0x1c55e, 0x00},
	{0x1c55f, 0x00},
	{0x1c560, 0x00},
	{0x1c561, 0x00},
	{0x1c562, 0xff},
	{0x1c563, 0xff},
	{0x1c564, 0x00},
	{0x1c565, 0x00},
	{0x1c566, 0x00},
	{0x1c567, 0x00},
	{0x1c174, 0x00},//y36721 set it as auto aec/agc at first.

	{0x60100, 0x01},//Software reset
	{0x6301b, 0xf0},//isp clock enable
	{0x63025, 0x40},//clock divider
	{0x63c12, 0x01},//data type
	{0x63c13, 0x22},//divider
	{0x63c14, 0x01},//men_thre
	{0x63c15, 0x53},//mem valid high&low number

	/* ISP TOP REG */
	{0x65000, 0x3f},
	{0x65001, 0x6f},//turn off local boost
	{0x65002, 0x9b},
	{0x65003, 0xff},
	{0x65004, 0x21},//turn on EDR
	{0x65005, 0x52},
	{0x65006, 0x02},
	{0x65008, 0x00},
	{0x65009, 0x00},

	/* AEC */
	{0x1c146, 0x2e},//low AE target
	{0x1c14a, 0x03},
	{0x1c14b, 0x0a},
	{0x1c14c, 0x08},//aec fast step//
	{0x1c14e, 0x04},//slow step//08
	{0x1c140, 0x01},//banding
	{0x1c13f, 0x02},
	{0x1c164, 0x14},//60Hz banding step
	{0x1c165, 0xa0},
	{0x1c166, 0x18},//50Hz banding step
	{0x1c167, 0xd0},
	{0x1c176, 0x05},//VTS
	{0x1c177, 0x28},
	{0x1c150, 0x00},//max gain
	{0x1c151, 0x80},
	{0x1c154, 0x00},//min gain
	{0x1c155, 0x10},
	{0x1c158, 0x52},//max exposure
	{0x1c159, 0x20},
	{0x1c15c, 0x00},//min expousre
	{0x1c15d, 0x20},
	{0x1c13e, 0x02},//real gain mode for OV8830

	{0x66401, 0x00},//window weight
	{0x66402, 0x00},//StatWin_Left
	{0x66403, 0x00},
	{0x66404, 0x00},//StatWin_Top
	{0x66405, 0x00},
	{0x66406, 0x00},//StatWin_Right
	{0x66407, 0x00},
	{0x66408, 0x08},//StatWin_Bottom
	{0x66409, 0x00},//definiton ofthe center 3x3 window
	{0x6640a, 0xc8},//nWin_Left
	{0x6640d, 0x00},
	{0x6640e, 0x96},//nWin_Top
	{0x66411, 0x04},
	{0x66412, 0xb0},//nWin_Width
	{0x66415, 0x03},
	{0x66416, 0x84},//nWin_Height
	{0x6642e, 0x01},//nWin_Weight_0 weight pass
	{0x6642f, 0x01},//nWin_Weight_1
	{0x66430, 0x01},//nWin_Weight_2
	{0x66431, 0x01},//nWin_Weight_3
	{0x66432, 0x02},//nWin_Weight_4
	{0x66433, 0x02},//nWin_Weight_5
	{0x66434, 0x02},//nWin_Weight_6
	{0x66435, 0x02},//nWin_Weight_7
	{0x66436, 0x04},//nWin_Weight_8
	{0x66437, 0x02},//nWin_Weight_9
	{0x66438, 0x02},//nWin_Weight_10
	{0x66439, 0x02},//nWin_Weight_11
	{0x6643a, 0x02},//nWin_Weight_12
	{0x6644e, 0x03},//nWin_Weight_Shift
	{0x6644f, 0x04},//black level
	{0x66450, 0xf8},//saturate level
	{0x6645b, 0x1a},//black weight1
	{0x6645d, 0x10},//black weight2
	{0x66460, 0x04},//saturate per1
	{0x66464, 0x0a},//saturate per2
	{0x66467, 0x1a},//saturate weight1
	{0x66469, 0x10},//saturate weight2
	//auto AE contr,ol
	{0x1c590, 0x00},
	{0x1c591, 0x00},//turn on
	{0x1c592, 0x50},//high ratio
	{0x1c593, 0x20},//low ratio
	{0x1c594, 0x01},//high weight
	{0x1c595, 0x05},
	{0x1c596, 0x09},
	{0x1c597, 0x01},//low weight
	{0x1c598, 0x02},
	{0x1c599, 0x04},

	/* Raw Stretch */
	{0x65020, 0x01},//RAW Stretch Target
	{0x66500, 0x28},
	{0x66501, 0x00},
	{0x66502, 0xff},
	{0x66503, 0x0f},
	{0x1c1b0, 0xa0},
	{0x1c1b1, 0xa0},
	{0x1c1b2, 0x01},
	{0x65905, 0x08},
	{0x66301, 0x02},//high level step
	{0x66302, 0xd0},//ref bin
	{0x66303, 0x0a},//PsPer0
	{0x66304, 0x10},//PsPer1
	{0x1c5a4, 0x00},//use new high stretch
	{0x1c5a5, 0x08},//stretch low step
	{0x1c5a6, 0x08},//stretch high step
	{0x1c5a7, 0x0a},//stretch slow range
	{0x1c5a8, 0x02},//stretch slow step
	{0x66452, 0x0a},//hdr gain PsPer
	{0x1c1b8, 0x01},//analog gain

	/* De-noise */
	{0x65604, 0x00},//Richard for new curve 0314
	{0x65605, 0x00},//Richard for new curve 0314
	{0x65606, 0x00},//Richard for new curve 0314
	{0x65607, 0x00},//Richard for new curve 0314

	{0x65510, 0x0f},//G dns slope change from 0x4 to 0xf Richard 0320
	{0x6551a, 0x02},//Raw G Dns, Richard 0320
	{0x6551b, 0x03},//Richard for new curve 0320
	{0x6551c, 0x05},//Richard for new curve 0320
	{0x6551d, 0x07},//Richard for new curve 0320
	{0x6551e, 0x09},//Richard for new curve 0320
	{0x6551f, 0x0b},//Richard for new curve 0314
	{0x65520, 0x0f},//Richard for new curve 0314
	{0x65522, 0x00},//RAW BR De-noise
	{0x65523, 0x06},
	{0x65524, 0x00},
	{0x65525, 0x0c},
	{0x65526, 0x00},
	{0x65527, 0x12},
	{0x65528, 0x00},
	{0x65529, 0x24},
	{0x6552a, 0x00},
	{0x6552b, 0xf0},
	{0x6552c, 0x00},
	{0x6552d, 0xf0},
	{0x6552e, 0x00},
	{0x6552f, 0xf0},

	{0x65c00, 0x03},//UV De-noise
	{0x65c01, 0x05},
	{0x65c02, 0x08},
	{0x65c03, 0x1f},
	{0x65c04, 0x1f},
	{0x65c05, 0x1f},

	/* sharpeness */
	{0x65600, 0x00},
	{0x65601, 0x10},//0319
	{0x65602, 0x00},
	{0x65603, 0x40},//0319
	{0x65608, 0x06},
	{0x65609, 0x20},
	{0x6560c, 0x00},
	{0x6560d, 0x08},//0319
	{0x6560e, 0x10},//MinSharpenTp
	{0x6560f, 0x60},//MaxSharpenTp
	{0x65610, 0x10},//MinSharpenTm
	{0x65611, 0x60},//MaxSharpenTm
	{0x65613, 0x1f},//SharpenAlpha
	{0x65615, 0x08},//HFreq_thre
	{0x65617, 0x06},//HFreq_coef

	/* auto uv saturation */
	{0x1c4e8, 0x01},//Enable
	{0x1c4e9, 0x40},
	{0x1c4ea, 0x78},
	{0x1c4eb, 0x80}, //keep back for new cmx 0310
	{0x1c4ec, 0x70}, //keep back for new cmx 0310

	/* Global Gamma */
	{0x1c49b, 0x01},
	{0x1c49c, 0x02},
	{0x1c49d, 0x01}, //gamma 2.0 0310
	{0x1c49e, 0x02},
	{0x1c49f, 0x01}, //gamma 2.0 0310
	{0x1c4a0, 0x00},
	{0x1c4a1, 0x18},
	{0x1c4a2, 0x00},
	{0x1c4a3, 0x60}, //gamma 2.0 0310 //avoid false contour Richard@0323

	/* BLC */
	{0x1c58b, 0x40},//avoid false contour Richard@0323
	{0x1c58c, 0x40},//avoid false contour Richard@0323

	/* Tone Mapping */
	{0x1c4c0, 0x21},//new curve
	{0x1c4c1, 0x33},
	{0x1c4c2, 0x40},
	{0x1c4c3, 0x4b},
	{0x1c4c4, 0x54},
	{0x1c4c5, 0x5d},
	{0x1c4c6, 0x66},
	{0x1c4c7, 0x6f},
	{0x1c4c8, 0x79},
	{0x1c4c9, 0x83},
	{0x1c4ca, 0x8d},
	{0x1c4cb, 0x99},
	{0x1c4cc, 0xa6},
	{0x1c4cd, 0xb9},
	{0x1c4ce, 0xd3},
	{0x1c4d4, 0x20},//EDR scale
	{0x1c4d5, 0x20},//EDR scale
	{0x1c4cf, 0x80},
	{0x65a00, 0x0b},
	{0x65a01, 0xc0},

	//dark boost
	{0x1c4b0, 0x02},
	{0x1c4b1, 0x80},

	//curve gain control
	{0x1c1b3, 0x30},//Gain thre1
	{0x1c1b4, 0x70},//Gain thre2
	{0x1c1b5, 0x01},//EDR gain control
	{0x1c1b6, 0x01},//Curve Gain control
	{0x1c1b7, 0x60},//after gamma cut ratio

	//pass, manual uv curve gain list for curve 0314, Richard@0314
	{0x1c998, 0x01},
	{0x1c999, 0x00},
	{0x1c99a, 0x01},
	{0x1c99b, 0x00},
	{0x1c99c, 0x01},
	{0x1c99d, 0x03},
	{0x1c99e, 0x01},
	{0x1c99f, 0x0f},
	{0x1c9a0, 0x01},
	{0x1c9a1, 0x27},
	{0x1c9a2, 0x01},
	{0x1c9a3, 0x39},
	{0x1c9a4, 0x01},
	{0x1c9a5, 0x45},
	{0x1c9a6, 0x01},
	{0x1c9a7, 0x4d},
	{0x1c9a8, 0x01},
	{0x1c9a9, 0x4d},
	{0x1c9aa, 0x01},
	{0x1c9ab, 0x4d},
	{0x1c9ac, 0x01},
	{0x1c9ad, 0x4d},
	{0x1c9ae, 0x01},
	{0x1c9af, 0x3a},
	{0x1c9b0, 0x01},
	{0x1c9b1, 0x2a},
	{0x1c9b2, 0x01},
	{0x1c9b3, 0x08},
	{0x1c9b4, 0x00},
	{0x1c9b5, 0xd9},
	{0x1c9b6, 0x00},
	{0x1c9b7, 0xac},

	/* LENC */
	{0x1c247, 0x00},//one profile
	{0x1c24c, 0x00},
	{0x1c24d, 0x40},
	{0x1c24e, 0x00},
	{0x1c24f, 0x80},
	{0x1c248, 0x40},
	{0x1c24a, 0x20},
	{0x1c574, 0x00},
	{0x1c575, 0x20},
	{0x1c576, 0x00},
	{0x1c577, 0xf0},
	{0x1c578, 0x40},

	{0x65200, 0x0d},
	{0x65206, 0x3c},
	{0x65207, 0x04},
	{0x65208, 0x3c},
	{0x65209, 0x04},
	{0x6520a, 0x33},
	{0x6520b, 0x0c},
	{0x65214, 0x28},
	{0x65216, 0x20},

	//lenc 80%
	{0x1c264, 0x18},
	{0x1c265, 0x0f},
	{0x1c266, 0x0e},
	{0x1c267, 0x0f},
	{0x1c268, 0x10},
	{0x1c269, 0x17},
	{0x1c26a, 0x0c},
	{0x1c26b, 0x07},
	{0x1c26c, 0x04},
	{0x1c26d, 0x04},
	{0x1c26e, 0x07},
	{0x1c26f, 0x0c},
	{0x1c270, 0x09},
	{0x1c271, 0x02},
	{0x1c272, 0x00},
	{0x1c273, 0x00},
	{0x1c274, 0x02},
	{0x1c275, 0x08},
	{0x1c276, 0x0a},
	{0x1c277, 0x03},
	{0x1c278, 0x00},
	{0x1c279, 0x00},
	{0x1c27a, 0x02},
	{0x1c27b, 0x08},
	{0x1c27c, 0x0e},
	{0x1c27d, 0x09},
	{0x1c27e, 0x06},
	{0x1c27f, 0x06},
	{0x1c280, 0x08},
	{0x1c281, 0x0d},
	{0x1c282, 0x1c},
	{0x1c283, 0x14},
	{0x1c284, 0x11},
	{0x1c285, 0x11},
	{0x1c286, 0x13},
	{0x1c287, 0x1a},
	{0x1c288, 0x1f},
	{0x1c289, 0x20},
	{0x1c28a, 0x20},
	{0x1c28b, 0x20},
	{0x1c28c, 0x1f},
	{0x1c28d, 0x20},
	{0x1c28e, 0x1f},
	{0x1c28f, 0x20},
	{0x1c290, 0x20},
	{0x1c291, 0x20},
	{0x1c292, 0x1e},
	{0x1c293, 0x1f},
	{0x1c294, 0x20},
	{0x1c295, 0x20},
	{0x1c296, 0x1f},
	{0x1c297, 0x20},
	{0x1c298, 0x1f},
	{0x1c299, 0x1f},
	{0x1c29a, 0x1f},
	{0x1c29b, 0x20},
	{0x1c29c, 0x1e},
	{0x1c29d, 0x20},
	{0x1c29e, 0x1f},
	{0x1c29f, 0x20},
	{0x1c2a0, 0x1e},
	{0x1c2a1, 0x23},
	{0x1c2a2, 0x24},
	{0x1c2a3, 0x23},
	{0x1c2a4, 0x23},
	{0x1c2a5, 0x22},
	{0x1c2a6, 0x23},
	{0x1c2a7, 0x21},
	{0x1c2a8, 0x20},
	{0x1c2a9, 0x22},
	{0x1c2aa, 0x24},
	{0x1c2ab, 0x20},
	{0x1c2ac, 0x1f},
	{0x1c2ad, 0x20},
	{0x1c2ae, 0x20},
	{0x1c2af, 0x21},
	{0x1c2b0, 0x23},
	{0x1c2b1, 0x21},
	{0x1c2b2, 0x20},
	{0x1c2b3, 0x21},
	{0x1c2b4, 0x23},
	{0x1c2b5, 0x22},
	{0x1c2b6, 0x23},
	{0x1c2b7, 0x23},
	{0x1c2b8, 0x23},
	{0x1c2b9, 0x23},

	/* AWB */
	{0x66201, 0x52},
	{0x66203, 0x14},//crop window
	{0x66211, 0xe8},//awb top limit
	{0x66212, 0x12},//awb bottom limit

	{0x1c17c, 0x01},//CT mode
	{0x1c182, 0x08},
	{0x1c183, 0x00},//MinNum
	{0x1c184, 0x04},//AWB Step
	{0x1c58d, 0x00},//LimitAWBAtD65Enable

	{0x1c1be, 0x00},//AWB offset
	{0x1c1bf, 0x00},
	{0x1c1c0, 0x00},
	{0x1c1c1, 0x00},

	{0x1c1aa, 0x00},//avgAllEnable
	{0x1c1ad, 0x02},//weight of A
	{0x1c1ae, 0x10},//weight of D65
	{0x1c1af, 0x04},//weight of CWF

	{0x1c5ac, 0x80},//pre-gain
	{0x1c5ad, 0x80},
	{0x1c5ae, 0x80},

	{0x1ccce, 0x02},//awb shift
	{0x1cccf, 0x30},//B gain for A
	{0x1ccd0, 0x30},//R gain for A
	{0x1ccd1, 0x30},//B gain for C
	{0x1ccd2, 0x30},//R gain for C
	{0x1ccd3, 0x20},//B gain for D indoor
	{0x1ccd4, 0x30},//R gain for D indoor
	{0x1cccc, 0x00},//B gain for D outdoor
	{0x1cccd, 0x10},//R gain for D outdoor

	{0x1ccd5, 0x38},//CT_A
	{0x1ccd6, 0x67},//CT_C
	{0x1ccd7, 0xa8},//CT_D

	{0x1c5cd, 0x01},//high light awb shift, modified by Jiangtao to avoid blurish when high CT 0310
	{0x1c5ce, 0x00},
	{0x1c5cf, 0x8e},
	{0x1c5d0, 0x00},
	{0x1c5d1, 0xfc},
	{0x1c5d2, 0x03},
	{0x1c5d3, 0x00},
	{0x1c5d4, 0x56},
	{0x1c5d5, 0xb0},
	{0x1c5d6, 0x9c},
	{0x1c5d7, 0xcc},
	{0x1c5d8, 0x40},
	{0x1c1c2, 0x00},
	{0x1c1c3, 0x20},

	//OVISP CTAWB setting for Long Exposure (HDR/3D)   Jiangtao 0309
	{0x66206, 0x18},//cwf window D0
	{0x66207, 0x18},//range DX
	{0x66208, 0x18},//range DY
	{0x66209, 0x80},//CWF X
	{0x6620a, 0x5e},//CWF Y
	{0x6620b, 0xe0},//K_D65_Y2X
	{0x6620c, 0xbe},//K_A_X2Y
	{0x6620d, 0x52},//D65 Limit, Richard@0315
	{0x6620e, 0x35},//A Limit, Richard@0315
	{0x6620f, 0x71},//D65 split
	{0x66210, 0x4e},//A split
	{0x1c1c8, 0x01},
	{0x1c1c9, 0x3d},//CenterCT
	{0x1c1cc, 0x00},
	{0x1c1cd, 0xc3},//LeftCT
	{0x1c1d0, 0x02},
	{0x1c1d1, 0x4e},//RightCT
	{0x1c254, 0x00},
	{0x1c255, 0xdc},
	{0x1c256, 0x00},
	{0x1c257, 0xed},
	{0x1c258, 0x01},
	{0x1c259, 0x83},
	{0x1c25a, 0x02},
	{0x1c25b, 0x06},

	/* Color matrix */
	{0x1C1d8, 0x01},//center matrix, add 10% saturation 0310, remember change uv saturation back
	{0x1C1d9, 0x99},
	{0x1C1da, 0xff},
	{0x1C1db, 0x54},
	{0x1C1dc, 0xff},
	{0x1C1dd, 0xd0},
	{0x1C1de, 0xff},
	{0x1C1df, 0x8f},
	{0x1C1e0, 0x01},
	{0x1C1e1, 0xb9},
	{0x1C1e2, 0xff},
	{0x1C1e3, 0xc0},
	{0x1C1e4, 0xff},
	{0x1C1e5, 0xeb},
	{0x1C1e6, 0xff},
	{0x1C1e7, 0x67},
	{0x1C1e8, 0x01},
	{0x1C1e9, 0xf0},

	{0x1C1FC, 0x00},//cmx left delta
	{0x1C1FD, 0x00},
	{0x1C1FE, 0x00},
	{0x1C1FF, 0x00},
	{0x1C200, 0x00},
	{0x1C201, 0x00},
	{0x1C202, 0x00},
	{0x1C203, 0x00},
	{0x1C204, 0x00},
	{0x1C205, 0x00},
	{0x1C206, 0x00},
	{0x1C207, 0x00},
	{0x1C208, 0x00},
	{0x1C209, 0x00},
	{0x1C20A, 0x00},
	{0x1C20B, 0x00},
	{0x1C20C, 0x00},
	{0x1C20D, 0x00},

	{0x1C220, 0x00},//cmx right delta
	{0x1C221, 0x30},
	{0x1C222, 0xff},
	{0x1C223, 0xae},
	{0x1C224, 0x00},
	{0x1C225, 0x22},
	{0x1C226, 0x00},
	{0x1C227, 0x2e},
	{0x1C228, 0xff},
	{0x1C229, 0xfa},
	{0x1C22A, 0xff},
	{0x1C22B, 0xd8},
	{0x1C22C, 0x00},
	{0x1C22D, 0x18},
	{0x1C22E, 0x00},
	{0x1C22F, 0x24},
	{0x1C230, 0xff},
	{0x1C231, 0xc4},

	//contrast curve 21
	{0x1C4C0, 0x19},
	{0x1C4C1, 0x2C},
	{0x1C4C2, 0x3B},
	{0x1C4C3, 0x47},
	{0x1C4C4, 0x52},
	{0x1C4C5, 0x5C},
	{0x1C4C6, 0x66},
	{0x1C4C7, 0x70},
	{0x1C4C8, 0x7A},
	{0x1C4C9, 0x85},
	{0x1C4CA, 0x91},
	{0x1C4CB, 0xA0},
	{0x1C4CC, 0xB0},
	{0x1C4CD, 0xC5},
	{0x1C4CE, 0xDF},

	//Manual UV curve 22
	{0x1C998, 0x01},
	{0x1C999, 0x27},
	{0x1C99A, 0x01},
	{0x1C99B, 0x45},
	{0x1C99C, 0x01},
	{0x1C99D, 0x4D},
	{0x1C99E, 0x01},
	{0x1C99F, 0x4D},
	{0x1C9A0, 0x01},
	{0x1C9A1, 0x4D},
	{0x1C9A2, 0x01},
	{0x1C9A3, 0x4D},
	{0x1C9A4, 0x01},
	{0x1C9A5, 0x4D},
	{0x1C9A6, 0x01},
	{0x1C9A7, 0x4D},
	{0x1C9A8, 0x01},
	{0x1C9A9, 0x4D},
	{0x1C9AA, 0x01},
	{0x1C9AB, 0x4D},
	{0x1C9AC, 0x01},
	{0x1C9AD, 0x48},
	{0x1C9AE, 0x01},
	{0x1C9AF, 0x3B},
	{0x1C9B0, 0x01},
	{0x1C9B1, 0x2C},
	{0x1C9B2, 0x01},
	{0x1C9B3, 0x0E},
	{0x1C9B4, 0x00},
	{0x1C9B5, 0xE6},
	{0x1C9B6, 0x00},
	{0x1C9B7, 0xAA},
};

const struct isp_reg_t isp_set_format_regs[] = {


};
#endif/*__ISP_REGS_H__*/
